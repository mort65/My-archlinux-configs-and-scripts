#!/usr/bin/env python3
import sys
import os
import re
main_dir = ''
text = ''
pattern = ''
result=[]
recursive = False
ignorecase = False
searchdir = False
searchfile = False
onlyname = False
searchlink = False
mark = False
usage = False
def show_usage():
    print("""Usage: pysearch [OPTION]... [PATH] [TEXT]
search for TEXT in the given PATH.Text can be a regular expression.
  -h, --help                 display this help 
  -r, --recursive            search recursively  
  -f, --file                 search for files
  -l, --link                 search for links
  -d, --dir                  search for directories
  -m, --mark                 mark files and dirs with f and d
  -i, --ignore-case          ignore case in the search result    
  -s, --short-name           don't show fullpath in the result
  
Examples:
  pysearch -if /usr/bin vim    "Find files in bin dir that have 
  'vim' in their names and ignore case sensitivity."
  pysearch -lr /usr/bin 'vim$' "Recursively find all links in 
  bin dir that have 'vim' at the end of their names.
  pysearch -rs /usr/bin '^im'  "Find recursively everything 
  in bin that starts with 'im' and only write short names."
  pysearch -dr /usr/bin '.*'   "Recursively find all dirs in bin"
  """)

def add_result(parent_dir,new_result,is_dir):
    if recursive:
        if is_dir:
            if os.path.islink(os.path.join(parent_dir,new_result)):
                if searchlink:
                    if onlyname:
                        add_link(new_result,os.path.realpath(os.path.join(parent_dir,new_result)),is_dir)
                    else:
                        add_link(os.path.join(parent_dir,new_result),os.path.realpath(os.path.join(parent_dir,new_result)),is_dir)
            elif searchdir:  
                if onlyname:
                    add_dir(new_result)
                else:
                    add_dir(os.path.realpath(os.path.join(parent_dir,new_result)))
        else:
            if os.path.islink(os.path.join(parent_dir,new_result)):
                if searchlink:
                    if onlyname:
                        add_link(new_result,os.path.realpath(os.path.join(parent_dir,new_result)),is_dir)
                    else:
                        add_link(os.path.join(parent_dir,new_result),os.path.realpath(os.path.join(parent_dir,new_result)),is_dir)
            elif searchfile: 
                if onlyname:
                    add_file(new_result)
                else:
                    add_file(os.path.realpath(os.path.join(parent_dir,new_result)))
    else:
        if is_dir:
            if os.path.islink(os.path.join(parent_dir,new_result)):
                if searchlink:
                    if onlyname:
                        add_link(new_result,os.path.realpath(os.path.join(parent_dir,new_result)),is_dir)
                    else:
                        add_link(os.path.join(parent_dir,new_result),os.path.realpath(os.path.join(parent_dir,new_result)),is_dir)
            elif searchdir:
                if onlyname:
                    add_dir(new_result)
                else:
                    add_dir(os.path.realpath(os.path.join(parent_dir,new_result)))
        else:
            if os.path.islink(os.path.join(parent_dir,new_result)):
                if searchlink:
                    if onlyname:
                        add_link(new_result,os.path.realpath(os.path.join(parent_dir,new_result)),is_dir)
                    else:
                        add_link(os.path.join(parent_dir,new_result),os.path.realpath(os.path.join(parent_dir,new_result)),is_dir)                      
            elif searchfile:
                if onlyname:
                    add_file(new_result)
                else:
                    add_file(os.path.realpath(os.path.join(parent_dir,new_result)))

def add_link(new_link,target,is_target_dir):
    result_link = "\"" + new_link + "\" -> \""+ target +"\""
    if mark:
        if is_target_dir:
            result_link += "d"
        else:
            result_link += "f"
    result.append(result_link)

def add_dir(new_dir):
    if mark:
        result.append("\""+new_dir+"\"d")
    else:
        result.append("\""+new_dir+"\"")

def add_file(new_file):
    if mark:
        result.append("\""+new_file+"\"f")
    else:
        result.append("\""+new_file+"\"")
        

if len(sys.argv) > 1:
    for i in range(1,len(sys.argv)):
        if sys.argv[i][0] == '-':
            if (main_dir != '') or (text != ''):
                show_usage()
                exit(1)
            elif sys.argv[i][1] == '-':
                if sys.argv[i] == '--help':
                    usage = True
                elif sys.argv[i] == '--recursive':
                    recursive = True
                elif sys.argv[i] == '--ignore-case':
                    ignorecase = True
                elif sys.argv[i] == '--link':
                    searchlink = True                   
                elif sys.argv[i] == '--dir':
                    searchdir = True
                elif sys.argv[i] == '--short-name':
                    onlyname = True
                elif sys.argv[i] == '--file':
                    searchfile = True
                elif sys.argv[i] == '--mark':
                    mark = True                    
                else:
                    show_usage()
                    exit(1)
            else:
                for c in range(1,len(sys.argv[i])):
                    if sys.argv[i][c] == 'h':
                        usage = True
                    elif sys.argv[i][c] == 'r':
                        recursive = True
                    elif sys.argv[i][c] == 'i':
                        ignorecase = True
                    elif sys.argv[i][c] == 'l':
                        searchlink = True                                              
                    elif sys.argv[i][c] == 'd':
                        searchdir = True
                    elif sys.argv[i][c] == 's':
                        onlyname = True
                    elif sys.argv[i][c] == 'f':
                        searchfile = True
                    elif sys.argv[i][c] == 'm':
                        mark = True                        
                    else:
                        show_usage()
                        exit(1)
        elif i == ( len(sys.argv) - 2 ):
            main_dir = sys.argv[i]
        elif i == ( len(sys.argv) - 1 ):
            text = sys.argv[i]
            if ignorecase:
                pattern = text.lower()
            else:
                pattern = text
        else:
            show_usage()
            exit(1)
if usage:
    show_usage()
    exit(0)
if searchdir is False and searchlink is False and searchfile is False:
    searchdir,searchfile,searchlink = True,True,True
if main_dir == '':
    main_dir =os.path.realpath('.')
if pattern == '':
    pattern ='.*'

try:
    if recursive:
        if searchdir or searchlink:
            for root, directories, filenames in os.walk(main_dir):
                for dirname in directories:
                    if ignorecase:
                        if re.search(pattern,dirname.lower()):
                            add_result(root,dirname,True)
                    else:
                        if re.search(pattern,dirname):
                            add_result(root,dirname,True)
        if searchfile or searchlink:
            for root, directories, filenames in os.walk(main_dir):
                for filename in filenames:
                    if ignorecase:
                        if re.search(pattern,filename.lower()):
                            add_result(root,filename,False)
                    else:
                        if re.search(pattern,filename):
                            add_result(root,filename,False)
    else:
        if searchdir or searchlink:
            for name in os.listdir(main_dir):
                if ignorecase:
                    if re.search(pattern,os.path.basename(name).lower()):
                         if os.path.isdir(os.path.join(main_dir,name)):
                             add_result(main_dir,name,True)
                else:
                    if re.search(pattern,os.path.basename(name)):
                         if os.path.isdir(os.path.join(main_dir,name)):
                             add_result(main_dir,name,True)
        if searchfile or searchlink:
            for name in os.listdir(main_dir):
                if ignorecase:
                    if re.search(pattern,os.path.basename(name).lower()):
                        if not os.path.isdir(os.path.join(main_dir,name)):
                            add_result(main_dir,name,False)
                else:
                    if re.search(pattern,os.path.basename(name)):
                        if not os.path.isdir(os.path.join(main_dir,name)):
                            add_result(main_dir,name,False)
except:
    pass

for i in result: 
        print(i)  

