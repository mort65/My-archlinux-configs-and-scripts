#!/bin/bash
#Search for files and directories by name.

# Colors
blue="\033[1;34m"
green="\033[1;32m"
red="\033[1;31m"
bold="\033[1;37m"
reset="\033[0m"

Args=$@
Count="${#}"
Main_Dir=""
Text=""
Help=""
Ignorecase=""
Recursive=""
Arg1="ifa"
Arg2="x"
function help {
    echo "Usage: tsearch [OPTION]... [PATH] [NAME]"
    echo ""
    echo "Search for files and directories by name."
    echo ""
    echo "  -r, --recursive    search recursively"
    echo "  -h, --help         display this message and exit" 
    echo "  -i, --ignore-case  ignore case in the search result"
    echo ""
}

function usage {
    help
    exit 1
}


#testing number of args:
if [ "${#}" -gt 5 ]; then
    echo -e $red"Error:$reset Invalid number of parameters"
    echo ""
    usage
fi

# Test command-line arguments.
if [ -n "$1" ]; then #non-empty
  c=1
  while [ "$1" != "" ]; do
    PARAM="$1"
    if [[ $PARAM =~ ^-.*$ ]]; then
      if [[ $Main_Dir != "" ]] || [[ $Text != "" ]]; then
        echo -e $red"Error:$reset Invalid arguments '${Args}'"
        echo ""
        usage
      elif [[  $PARAM =~ ^--[Hh][Ee][Ll][Pp]$ ]] || [[ $PARAM =~ ^-[Hh]$ ]]; then
        if [[ $Help == "" ]]; then
          Help="Yes"
        else
          echo -e $red"Error:$reset Invalid arguments '${Args}'"
          echo ""
          usage
        fi
      elif [[  $PARAM =~ ^--[Rr][Ee][Cc][Uu][Rr][Ss][Ii][Vv][Ee]$ ]] || [[ $PARAM =~ ^-[Rr]$ ]]; then
        if [[ $Recursive == "" ]]; then
          Recursive="Yes"
        else
          echo -e $red"Error:$reset Invalid arguments '${Args}'"
          echo ""
          usage
        fi
      elif [[ $PARAM =~ ^--[Ii][Gg][Nn][Oo][Rr][Ee]-[Cc][Aa][Ss][Ee]$ ]] || [[ $PARAM =~ ^-[Ii]$ ]]; then
        if [[ $Ignorecase == "" ]]; then
          Ignorecase="Yes"
        else
          echo -e $red"Error:$reset Invalid arguments '${Args}'"
          echo ""
          usage
        fi
      elif [[ $PARAM =~ ^-[IiRr][IiRr]$ ]]; then
        i=1
        while (( i++ < ${#PARAM} ))
        do
          char=$(expr substr "$PARAM" $i 1)
          if [[ $char =~ [Ii] ]]; then
            if [[ $Ignorecase == "" ]]; then
                Ignorecase="Yes"
            else
                echo -e $red"Error:$reset Invalid arguments '${Args}'"
                echo ""
                usage
            fi
          elif [[ $char =~ [Rr] ]]; then
            if [[ $Recursive == "" ]]; then
                Recursive="Yes"
            else
                echo -e $red"Error:$reset Invalid arguments '${Args}'"
                echo ""
                usage
            fi
          else
            echo -e $red"Error:$reset Invalid argument '$PARAM'"
            echo ""
            usage
          fi
        done
      else
        echo -e $red"Error:$reset Invalid argument '$PARAM'"
        echo ""
        usage
      fi
    elif [[ $c -eq $(("${Count}" - 1)) ]]; then
      if [[ $Main_Dir == "" ]]; then
        Main_Dir="$PARAM"
      else
        echo -e $red"Error:$reset Invalid argument '$PARAM'"
        echo ""
        usage
      fi
    elif [[ $c -eq "${Count}" ]]; then
      if [[ $Text == "" ]]; then
        Text="$PARAM"
      else
        echo -e $red"Error:$reset Invalid argument '$PARAM'"
        echo ""
        usage
      fi
    else
      echo -e $red"Error:$reset Invalid argument '$PARAM'"
      echo ""
      usage
    fi
    shift
    c=$(($c + 1))
  done
fi              

if [[ $Help == "Yes" ]]; then
  help
  exit 0
fi

if [[ $Main_Dir == "" ]]; then
  Main_Dir="${PWD}"
fi

if [[ $Text == "" ]]; then
  Text=".*"
fi

if [[ $Ignorecase == "Yes" ]]; then
  Arg2="${Arg2}i"
fi

if [[ $Recursive != "Yes" ]]; then
  tree --noreport "-${Arg1}"L 1 "${Main_Dir}" | grep "-${Arg2}" --exclude-dir={.bzr,CVS,.git,.hg,.svn} --regexp="^.*${Text}[^/]*$"
else
  tree --noreport "-${Arg1}" "${Main_Dir}" | grep "-${Arg2}" --exclude-dir={.bzr,CVS,.git,.hg,.svn} --regexp="^.*${Text}[^/]*$"
fi

exit 0
